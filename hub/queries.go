// Code generated by go-bindata.
// sources:
// sql/configTableExists.sql
// sql/createConfigTable.sql
// sql/createDataTable.sql
// sql/dataTableExists.sql
// sql/insertDataPoint.sql
// sql/insertDefaultConfig.sql
// sql/selectDataPoints.sql
// sql/selectLatestConfig.sql
// sql/updateLastConfig.sql
// DO NOT EDIT!

package hub

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sqlConfigtableexistsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0a\x76\xf5\x71\x75\x0e\x51\xc8\x4b\xcc\x4d\x55\x70\x0b\xf2\xf7\x55\x28\x2e\xcc\xc9\x2c\x49\x8d\xcf\x4d\x2c\x2e\x49\x2d\x52\x08\xf7\x70\x0d\x72\x55\x28\xa9\x2c\x48\xb5\x55\x2f\x49\x4c\xca\x49\x55\x57\x70\xf4\x73\x01\x2b\xb7\x55\x4f\xce\xcf\x4b\xcb\x4c\x57\xe7\x02\x04\x00\x00\xff\xff\x4d\x26\x89\x17\x44\x00\x00\x00")

func sqlConfigtableexistsSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlConfigtableexistsSql,
		"sql/configTableExists.sql",
	)
}

func sqlConfigtableexistsSql() (*asset, error) {
	bytes, err := sqlConfigtableexistsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/configTableExists.sql", size: 68, mode: os.FileMode(420), modTime: time.Unix(1457422864, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlCreateconfigtableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x94\xc1\x4e\xfb\x30\x0c\xc6\xcf\xdb\x53\xe4\xf8\xff\x4b\x5c\xd8\x23\x80\x18\x27\xd8\xa4\x56\x1c\xb8\x79\xad\xe9\x22\x52\xa7\xf2\x5c\xb1\xbd\x3d\x49\x27\x41\x17\x35\xc1\x91\x7a\x68\xfa\xcb\xf7\xe5\x73\x65\x37\x8c\x20\x68\x04\x0e\x0e\x4d\xe3\xe9\xc3\x76\xff\xd6\x26\x2c\xdb\x9a\xd5\xca\xcc\x96\x25\xc1\x0e\xd9\x0c\x6c\x7b\xe0\x8b\xf9\xc4\x8b\x81\x51\xbc\xa5\xa0\xd1\x23\xc9\xdd\x74\x6e\x8b\x1c\x5f\x90\x2b\xa4\x93\xe7\xe9\xa8\xe0\x59\x0c\xf9\xf0\x8c\xce\x5d\xb1\x3d\xe3\x09\xa9\xc1\x77\x64\x9f\x3a\x2c\x93\x8f\xe0\xec\x81\x41\xac\x27\x13\x2e\xed\x32\xd8\x8e\x6a\xdb\x23\x2b\x04\x9f\x28\x86\x6e\x15\x64\x54\xf4\xa3\x14\xc8\x1a\xfb\x01\xc3\xe5\x46\xc6\xaa\x81\x50\xca\x3c\x09\xdc\xa1\xcc\xf8\xb0\xb7\x14\xc7\xb6\x95\xf3\x03\xce\xff\xc0\x02\xf6\x3a\xc0\xbc\x82\x85\x1b\x06\x72\x5e\xc1\x9c\x60\x8d\xcd\x7d\x7d\x0c\xb9\x8f\xde\xb5\x45\xc1\x48\xbe\x58\x52\x58\x4f\x24\x9c\x75\xe4\x46\xed\xbe\x51\xbb\x6f\x74\xee\x5b\x20\x65\xf6\x48\xea\xdc\x27\x52\xeb\xae\xcc\x1e\x49\xb5\xbb\x32\xfb\x7e\xec\x87\x34\x7c\x81\x4c\xec\x4b\xe4\xad\x7d\x9e\x4c\xc3\x17\x48\xb5\x7b\x1a\x3e\xdb\x1a\x41\xf1\x0d\xdc\xf8\xdb\x6e\xcb\xbd\x16\xe4\x54\x98\xa5\x38\x3a\x4e\xd7\xee\x2e\xa9\xfd\x89\x55\x02\xdd\xcd\x10\xc8\xa6\xd8\x3d\x27\x03\x7b\x41\xed\x81\xf1\xcb\x52\x17\x44\x59\xe2\x50\x8b\x7b\x6d\x9c\xff\xe9\xf0\x91\xe6\x18\xbf\xff\xe8\xdd\x40\xeb\xff\xeb\xef\x00\x00\x00\xff\xff\x6b\x39\x28\xcf\x37\x06\x00\x00")

func sqlCreateconfigtableSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlCreateconfigtableSql,
		"sql/createConfigTable.sql",
	)
}

func sqlCreateconfigtableSql() (*asset, error) {
	bytes, err := sqlCreateconfigtableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/createConfigTable.sql", size: 1591, mode: os.FileMode(420), modTime: time.Unix(1457490398, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlCreatedatatableSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\xcd\x41\x0a\xc2\x30\x10\x85\xe1\x75\x72\x8a\x59\xb6\xe0\x2d\x14\xc4\x9d\xd0\x5e\x20\x26\x2f\x21\x18\x27\x32\x4e\x11\x6f\x6f\x0a\x01\xa9\x08\xce\xf2\x9b\x07\xbf\x17\x38\x05\xa9\xbb\x14\x50\x70\xea\x06\x6b\x72\xa0\xcd\x65\x56\x24\x08\x71\x55\xe2\xa5\x94\x9d\x35\x93\xe2\xfe\x67\x32\x3b\x49\xd0\x19\xb7\x3e\x6c\xa1\x95\xf7\x8b\x08\xf8\xe3\x9d\xa7\xe3\xb6\xd9\xf9\x7c\x3a\xfc\xe4\xfa\x6c\xb1\x6f\xb6\x26\x56\x41\x4e\x4c\x57\xbc\x68\xc8\x61\x6c\x8f\x88\x96\xf3\x78\x90\xaf\x1c\x73\x5a\xd5\x8e\xf6\x1d\x00\x00\xff\xff\xfc\xe1\x63\x66\xf7\x00\x00\x00")

func sqlCreatedatatableSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlCreatedatatableSql,
		"sql/createDataTable.sql",
	)
}

func sqlCreatedatatableSql() (*asset, error) {
	bytes, err := sqlCreatedatatableSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/createDataTable.sql", size: 247, mode: os.FileMode(420), modTime: time.Unix(1457491117, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlDatatableexistsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x0a\x76\xf5\x71\x75\x0e\x51\xc8\x4b\xcc\x4d\x55\x70\x0b\xf2\xf7\x55\x28\x2e\xcc\xc9\x2c\x49\x8d\xcf\x4d\x2c\x2e\x49\x2d\x52\x08\xf7\x70\x0d\x72\x55\x28\xa9\x2c\x48\xb5\x55\x2f\x49\x4c\xca\x49\x55\x57\x70\xf4\x73\x01\x2b\xb7\x55\x4f\x49\x2c\x49\x54\xe7\x02\x04\x00\x00\xff\xff\x66\x7d\xbd\x56\x42\x00\x00\x00")

func sqlDatatableexistsSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlDatatableexistsSql,
		"sql/dataTableExists.sql",
	)
}

func sqlDatatableexistsSql() (*asset, error) {
	bytes, err := sqlDatatableexistsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/dataTableExists.sql", size: 66, mode: os.FileMode(420), modTime: time.Unix(1457490089, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlInsertdatapointSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xca\xcc\x2b\x4e\x2d\x2a\x51\xc8\xcc\x2b\xc9\x57\x48\x49\x2c\x49\xd4\xc8\x4c\xd1\x51\x08\x2e\x49\x2d\xd0\x51\x08\x49\x2c\x4a\x4f\x2d\x09\x49\xcd\x05\xb2\x9d\x4b\x8b\x8a\x52\xf3\xa0\x9c\x60\x77\x1d\x85\x00\x4f\x17\x20\x91\x5f\x9e\x5a\xa4\xa9\x50\x96\x98\x53\x9a\x5a\xac\xa0\x61\xaf\xa3\x80\x8e\x34\x01\x01\x00\x00\xff\xff\x3a\xff\x9c\xba\x60\x00\x00\x00")

func sqlInsertdatapointSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlInsertdatapointSql,
		"sql/insertDataPoint.sql",
	)
}

func sqlInsertdatapointSql() (*asset, error) {
	bytes, err := sqlInsertdatapointSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/insertDataPoint.sql", size: 96, mode: os.FileMode(420), modTime: time.Unix(1457491428, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlInsertdefaultconfigSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x93\x4f\x6f\xe2\x30\x10\xc5\xcf\xf0\x29\x2c\x4e\x8b\xb4\x8b\xc8\x1f\xfe\xec\x75\x57\xa5\xa7\x16\xa4\xa0\x1e\x7a\x33\x61\x1a\x2c\x25\xe3\xc8\x71\x5a\x3e\x7e\x63\x6c\x88\x6d\xd9\xaa\x2f\x33\x79\xbf\xcc\xe3\x8d\x88\x19\x76\x20\x24\x61\x28\x39\x29\x39\x7e\xb0\x8a\xfc\x9a\x92\xe1\xec\x40\x34\x80\x12\x44\x01\xd8\x71\xa1\x24\xf2\xfb\x46\x0e\x02\x3a\xc0\x12\xde\x41\x70\x62\x8e\x4b\xfe\xd3\x9a\x9d\x04\x95\x8c\xa3\x47\xf6\x78\x64\x0d\x84\xdc\x9e\x90\x9e\x6a\x38\x07\x88\x9a\xe0\xbd\xb4\xc8\x11\x9a\x16\x06\xff\x5e\x40\x51\xd2\x1a\x2c\x42\x45\x05\xd2\xe2\xa3\x1b\x3b\x17\x35\x6f\x81\x58\x47\x93\xd7\x96\xda\xab\xb8\xc4\x5e\xc5\x49\x50\x26\xc7\xcb\x10\xf0\xc2\xeb\x33\xf1\xc9\x0b\xc3\x80\xdb\x8d\xd0\x6b\x98\xa4\x51\xb7\x34\xea\x96\x86\xdd\x76\x14\x23\xd9\x14\x09\xbb\xdd\x48\xcc\x2d\x92\x4d\x91\xa8\x5b\x24\xdb\xa1\x6f\x5a\x3f\x9c\x45\x3c\x3b\x9b\xb8\x76\x23\xf1\xc3\x59\x24\xea\xe6\x87\x7b\xfc\xdb\xc3\xc4\x1b\xad\x7b\x08\x10\x7a\x8d\x11\x86\xea\x4b\xed\xf4\xc7\xe6\xcd\x84\x48\x21\x69\x05\x93\x89\x6b\xb4\x7f\x1e\x95\x51\xfd\x27\xe0\x8b\x61\x35\x4c\x08\xa9\xae\x81\xb5\x06\x93\xe5\x45\x49\xd3\x39\xf9\x54\xc1\x3a\x73\x6f\x67\x33\xfd\x42\x9e\x2c\x97\xba\x1b\x1a\xd3\xe5\x46\x30\x65\xa5\xab\x81\x69\xb2\x30\x20\x5d\xac\x5c\x14\x2c\x69\xf8\xa5\x87\x9c\xe9\xb2\xba\xeb\xd9\x0f\xba\xf9\xf1\xec\xae\x3f\xe2\x7b\xfa\xbd\x49\xd6\xd9\xd6\x74\xf9\x26\x37\x26\x7f\xd6\xdb\xbf\xf9\x62\xb3\xd6\x4f\xce\x43\x78\x97\xe9\xfc\x3b\x00\x00\xff\xff\xde\xe8\x08\xaf\x02\x05\x00\x00")

func sqlInsertdefaultconfigSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlInsertdefaultconfigSql,
		"sql/insertDefaultConfig.sql",
	)
}

func sqlInsertdefaultconfigSql() (*asset, error) {
	bytes, err := sqlInsertdefaultconfigSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/insertDefaultConfig.sql", size: 1282, mode: os.FileMode(420), modTime: time.Unix(1457900834, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlSelectdatapointsSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2c\xca\xc1\x0d\x80\x20\x0c\x05\xd0\x55\xfe\x11\xdc\xc1\x61\x90\x7e\xb4\x89\x58\x53\x9a\xa8\xdb\x7b\xd0\xf3\x7b\x83\x3b\x6b\x60\x42\x73\xeb\x90\x12\x05\xd7\x46\x27\x54\x30\x23\xfd\xdc\xcb\x9d\x54\xf2\x97\xaa\x1d\x4d\xd7\x0c\x73\xa1\x63\x79\x30\x82\xe7\x1b\x00\x00\xff\xff\x57\x2f\xd8\x05\x48\x00\x00\x00")

func sqlSelectdatapointsSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlSelectdatapointsSql,
		"sql/selectDataPoints.sql",
	)
}

func sqlSelectdatapointsSql() (*asset, error) {
	bytes, err := sqlSelectdatapointsSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/selectDataPoints.sql", size: 72, mode: os.FileMode(420), modTime: time.Unix(1457491117, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlSelectlatestconfigSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x2a\x4e\xcd\x49\x4d\x2e\x51\xd0\x52\x48\x2b\xca\xcf\x55\x48\xce\xcf\x4b\xcb\x4c\x57\x28\xcf\x48\x2d\x4a\x55\xc8\x4c\x51\xb0\x55\xd0\x80\x2a\xc8\x4d\xac\xd0\xc8\x4c\xd1\x44\x56\xa6\x09\x08\x00\x00\xff\xff\x4e\xf7\x0c\x8a\x3c\x00\x00\x00")

func sqlSelectlatestconfigSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlSelectlatestconfigSql,
		"sql/selectLatestConfig.sql",
	)
}

func sqlSelectlatestconfigSql() (*asset, error) {
	bytes, err := sqlSelectlatestconfigSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/selectLatestConfig.sql", size: 60, mode: os.FileMode(420), modTime: time.Unix(1457422864, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sqlUpdatelastconfigSql = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x93\xbd\x4e\xc3\x30\x14\x85\xe7\xf4\x29\x3c\xb6\x12\x0b\xdd\x11\x12\x88\x32\x41\x2b\xa5\x62\x60\xbb\xb5\x4f\x13\x4b\xfe\x89\x1c\x47\xed\xe3\x63\xb7\x85\x3a\xc6\xbe\x5b\xf2\xe9\x7c\x39\x57\xb1\xa7\x41\x90\x07\xe3\xd6\x1c\x65\xc7\x46\xf8\x45\xb3\x81\xd3\x30\x1e\xae\x85\x19\xad\x63\x71\x9e\xd8\xf3\xc3\xa2\xd9\x39\x8c\x30\x1c\xdf\x70\x96\xdd\x66\x4e\x5e\x49\xc9\x83\x23\x2f\xad\xc9\xc8\xd6\xec\xa5\x46\xc9\xf6\x66\xe8\xa0\x20\x0a\x24\x26\xec\xe4\x13\xb2\x87\x1e\x10\xfc\x93\x43\xcb\x49\x21\x21\xe4\x3a\xf8\x84\xdf\x6d\x52\xb4\xca\x0e\x60\xc9\x5c\xc9\xe7\x40\xe9\x2a\x73\x92\xae\x32\x6b\xc0\x1f\xf7\x7d\x28\xd8\x5b\x25\x58\x4e\x3e\xa4\x29\xd8\x2e\x84\xce\x65\xb2\xae\xda\xd6\x55\xdb\xba\x6c\xdb\x90\xa9\x74\x8b\xa4\x6c\xbb\x90\x9a\xad\xd2\x2d\x92\xaa\xad\xd2\x6d\x37\xe9\x21\x2f\x97\x90\x4c\x97\x92\xb9\xee\x4e\xf2\x72\x09\xa9\xda\xf2\x72\x7f\x7f\x3b\x24\xbe\x48\x4d\x28\x10\x3a\xd7\x88\x34\xf1\xa4\x8e\xd7\xc3\x96\x65\x4a\xa4\xf5\xd4\x81\x35\xcd\xdc\xb4\x7d\x67\xff\xe6\x4a\x5e\x1c\x4e\xd2\x74\x21\xe6\x7c\xbc\x0b\xc9\x2e\xd2\xf3\xfe\xf7\xd5\x3d\xb3\x68\x4e\x3d\xc2\x37\xa5\x08\x4f\xcb\x11\x0a\xdc\x33\x4d\xe7\xa5\x14\x2b\x76\x74\x56\xdf\x2e\xfa\xea\x27\x00\x00\xff\xff\xac\x18\x0d\xe7\xf7\x03\x00\x00")

func sqlUpdatelastconfigSqlBytes() ([]byte, error) {
	return bindataRead(
		_sqlUpdatelastconfigSql,
		"sql/updateLastConfig.sql",
	)
}

func sqlUpdatelastconfigSql() (*asset, error) {
	bytes, err := sqlUpdatelastconfigSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sql/updateLastConfig.sql", size: 1015, mode: os.FileMode(420), modTime: time.Unix(1457489134, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sql/configTableExists.sql":   sqlConfigtableexistsSql,
	"sql/createConfigTable.sql":   sqlCreateconfigtableSql,
	"sql/createDataTable.sql":     sqlCreatedatatableSql,
	"sql/dataTableExists.sql":     sqlDatatableexistsSql,
	"sql/insertDataPoint.sql":     sqlInsertdatapointSql,
	"sql/insertDefaultConfig.sql": sqlInsertdefaultconfigSql,
	"sql/selectDataPoints.sql":    sqlSelectdatapointsSql,
	"sql/selectLatestConfig.sql":  sqlSelectlatestconfigSql,
	"sql/updateLastConfig.sql":    sqlUpdatelastconfigSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sql": &bintree{nil, map[string]*bintree{
		"configTableExists.sql":   &bintree{sqlConfigtableexistsSql, map[string]*bintree{}},
		"createConfigTable.sql":   &bintree{sqlCreateconfigtableSql, map[string]*bintree{}},
		"createDataTable.sql":     &bintree{sqlCreatedatatableSql, map[string]*bintree{}},
		"dataTableExists.sql":     &bintree{sqlDatatableexistsSql, map[string]*bintree{}},
		"insertDataPoint.sql":     &bintree{sqlInsertdatapointSql, map[string]*bintree{}},
		"insertDefaultConfig.sql": &bintree{sqlInsertdefaultconfigSql, map[string]*bintree{}},
		"selectDataPoints.sql":    &bintree{sqlSelectdatapointsSql, map[string]*bintree{}},
		"selectLatestConfig.sql":  &bintree{sqlSelectlatestconfigSql, map[string]*bintree{}},
		"updateLastConfig.sql":    &bintree{sqlUpdatelastconfigSql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
